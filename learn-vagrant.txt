vagrant up

vagrant reload --provision


wget -qO- 127.0.0.1

vagrant up --provider=aws

vagrant init -h

vagrant box

vagrant box list

vagrant box remove NAME

vagrant global-status

vagrant destroy [id]

vagrant plugin list

vagrant provision --provision-with shell

vagrant ssh -c COMMAND

vagrant ssh -c "echo 'hello'"


vagrant ssh-config


#If you want to apply a slightly different configuration to many multi-machine machines, you can use a loop to do this
(1..3).each do |i|
  config.vm.define "node-#{i}" do |node|
    node.vm.provision "shell",
      inline: "echo hello from node #{i}"
  end
end


but don't use for i in (1:3)
The "for i in ..." construct in Ruby actually modifies the value of i for each iteration, rather than making a copy. Therefore, when you run this, every node will actually provision with the same text.


config.vm.post_up_message - A message to show after vagrant up. This will be shown to the user and is useful for containing instructions such as how to access various components of the development environment.

Vagrant is able to define and control multiple guest machines per Vagrantfile. This is known as a "multi-machine" environment.


Multiple machines are defined within the same project Vagrantfile using the config.vm.define method call.
Vagrant.configure("2") do |config|
  config.vm.provision "shell", inline: "echo Hello"

  config.vm.define "web" do |web|
    web.vm.box = "apache"
  end

  config.vm.define "db" do |db|
    db.vm.box = "mysql"
  end
end




